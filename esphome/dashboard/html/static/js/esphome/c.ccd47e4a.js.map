{"version":3,"file":"c.ccd47e4a.js","sources":["../../../../node_modules/lit-html/directives/private-async-helpers.js","../../../../node_modules/lit-html/directives/until.js","../../../../src/install-web/index.ts","../../../../src/components/esphome-alert.ts","../../../../src/install-choose/install-choose-dialog.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=async(t,s)=>{for await(const i of t)if(!1===await s(i))return};class s{constructor(t){this.G=t}disconnect(){this.G=void 0}reconnect(t){this.G=t}deref(){return this.G}}class i{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var t;null!==(t=this.Y)&&void 0!==t||(this.Y=new Promise((t=>this.Z=t)))}resume(){var t;null===(t=this.Z)||void 0===t||t.call(this),this.Y=this.Z=void 0}}export{i as Pauser,s as PseudoWeakRef,t as forAwaitOf};\n//# sourceMappingURL=private-async-helpers.js.map\n","import{noChange as t}from\"../lit-html.js\";import{isPrimitive as s}from\"../directive-helpers.js\";import{AsyncDirective as i}from\"../async-directive.js\";import{PseudoWeakRef as r,Pauser as e}from\"./private-async-helpers.js\";import{directive as o}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const n=t=>!s(t)&&\"function\"==typeof t.then,h=1073741823;class c extends i{constructor(){super(...arguments),this._$C_t=h,this._$Cwt=[],this._$Cq=new r(this),this._$CK=new e}render(...s){var i;return null!==(i=s.find((t=>!n(t))))&&void 0!==i?i:t}update(s,i){const r=this._$Cwt;let e=r.length;this._$Cwt=i;const o=this._$Cq,c=this._$CK;this.isConnected||this.disconnected();for(let t=0;t<i.length&&!(t>this._$C_t);t++){const s=i[t];if(!n(s))return this._$C_t=t,s;t<e&&s===r[t]||(this._$C_t=h,e=0,Promise.resolve(s).then((async t=>{for(;c.get();)await c.get();const i=o.deref();if(void 0!==i){const r=i._$Cwt.indexOf(s);r>-1&&r<i._$C_t&&(i._$C_t=r,i.setValue(t))}})))}return t}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}const m=o(c);export{c as UntilDirective,m as until};\n//# sourceMappingURL=until.js.map\n","import { openNoPortPickedDialog } from \"../no-port-picked\";\nimport { createESPLoader } from \"../web-serial/create-esploader\";\nimport type { ESPHomeInstallWebDialog } from \"./install-web-dialog\";\n\nconst preload = () => import(\"./install-web-dialog\");\n\nexport const openInstallWebDialog = async (\n  params: ESPHomeInstallWebDialog[\"params\"],\n  // Called if a port has been picked and the dialog will be opened.\n  onDialogOpen?: () => void\n): Promise<void> => {\n  preload();\n\n  let port = params.port;\n\n  if (port) {\n    // ESPLoader likes opening the port.\n    await port.close();\n  } else {\n    try {\n      port = await navigator.serial.requestPort();\n    } catch (err: any) {\n      if ((err as DOMException).name === \"NotFoundError\") {\n        openNoPortPickedDialog(() =>\n          openInstallWebDialog(params, onDialogOpen)\n        );\n      } else {\n        alert(`Unable to connect: ${err.message}`);\n      }\n      return;\n    }\n  }\n  const esploader = createESPLoader(port);\n\n  if (onDialogOpen) {\n    onDialogOpen();\n  }\n\n  const dialog = document.createElement(\"esphome-install-web-dialog\");\n  dialog.params = params;\n  dialog.esploader = esploader;\n  document.body.append(dialog);\n};\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport \"./esphome-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\n@customElement(\"esphome-alert\")\nclass ESPHomeAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <esphome-svg-icon\n              .path=${ALERT_ICONS[this.alertType]}\n            ></esphome-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\"> </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      padding-left: var(--esphome-alert-padding-left, 8px);\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--alert-info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--alert-info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--alert-warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--alert-warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--alert-error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--alert-error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--alert-success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--alert-success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-alert\": ESPHomeAlert;\n  }\n}\n","import { LitElement, html, PropertyValues, css, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { until } from \"lit/directives/until.js\";\nimport { getSerialPorts, ServerSerialPort } from \"../api/serial-ports\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-list/mwc-list-item.js\";\nimport \"@material/mwc-circular-progress\";\nimport \"@material/mwc-button\";\nimport { allowsWebSerial, metaChevronRight, supportsWebSerial } from \"../const\";\nimport { openInstallServerDialog } from \"../install-server\";\nimport { openCompileDialog } from \"../compile\";\nimport { openInstallWebDialog } from \"../install-web\";\nimport {\n  compileConfiguration,\n  getConfiguration,\n  getDownloadUrl,\n} from \"../api/configuration\";\nimport { esphomeDialogStyles, esphomeSvgStyles } from \"../styles\";\nimport \"../components/esphome-alert\";\n\nconst WARNING_ICON = \"ðŸ‘€\";\nconst ESPHOME_WEB_URL = \"https://web.esphome.io/?dashboard_install\";\n\n@customElement(\"esphome-install-choose-dialog\")\nclass ESPHomeInstallChooseDialog extends LitElement {\n  @property() public configuration!: string;\n\n  @state() private _ethernet = false;\n  @state() private _isPico = false;\n\n  @state() private _ports?: ServerSerialPort[];\n\n  @state() private _state:\n    | \"pick_option\"\n    | \"download_instructions\"\n    | \"pick_download_type\"\n    | \"pick_server_port\" = \"pick_option\";\n\n  @state() private _error?: string | TemplateResult;\n\n  private _updateSerialInterval?: number;\n\n  private _compileConfiguration?: Promise<unknown>;\n\n  private _abortCompilation?: AbortController;\n\n  private get _platformSupportsWebSerial() {\n    return !this._isPico;\n  }\n\n  protected render() {\n    let heading;\n    let content;\n    let hideActions = false;\n\n    if (this._state === \"pick_option\") {\n      heading = `How do you want to install ${this.configuration} on your device?`;\n      content = html`\n        <mwc-list-item\n          twoline\n          hasMeta\n          .port=${\"OTA\"}\n          @click=${this._handleLegacyOption}\n        >\n          <span>${this._ethernet ? \"Via the network\" : \"Wirelessly\"}</span>\n          <span slot=\"secondary\">Requires the device to be online</span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          ?disabled=${!this._platformSupportsWebSerial}\n          @click=${this._handleBrowserInstall}\n        >\n          <span>Plug into this computer</span>\n          <span slot=\"secondary\">\n            ${this._platformSupportsWebSerial\n              ? \"For devices connected via USB to this computer\"\n              : \"Installing this via the web is not supported yet for this device\"}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item twoline hasMeta @click=${this._handleServerInstall}>\n          <span>Plug into the computer running ESPHome Dashboard</span>\n          <span slot=\"secondary\">\n            ${`For devices connected via USB to the server${\n              this._isPico ? \" and running ESPHome\" : \"\"\n            }`}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          @click=${() => {\n            this._state = this._isPico\n              ? \"download_instructions\"\n              : \"pick_download_type\";\n          }}\n        >\n          <span>Manual download</span>\n          <span slot=\"secondary\">\n            Install it yourself\n            ${this._isPico\n              ? \"by copying it to the Pico USB drive\"\n              : \"using ESPHome Web or other tools\"}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          dialogAction=\"close\"\n          label=\"Cancel\"\n        ></mwc-button>\n      `;\n    } else if (this._state === \"pick_server_port\") {\n      heading = \"Pick Server Port\";\n      content =\n        this._ports === undefined\n          ? this._renderProgress(\"Loading serial devices\")\n          : html`\n              ${this._isPico\n                ? html`\n                    <esphome-alert type=\"warning\">\n                      Installation via the server requires the Pico to already\n                      run ESPHome.\n                    </esphome-alert>\n                  `\n                : \"\"}\n              ${this._ports.length === 0\n                ? this._renderMessage(\n                    WARNING_ICON,\n                    html`\n                      No serial devices found.\n                      <br /><br />\n                      This list automatically refreshes if you plug one in.\n                    `,\n                    false\n                  )\n                : html`\n                    ${this._ports.map(\n                      (port) => html`\n                        <mwc-list-item\n                          twoline\n                          hasMeta\n                          .port=${port.port}\n                          @click=${this._handleLegacyOption}\n                        >\n                          <span>${port.desc}</span>\n                          <span slot=\"secondary\">${port.port}</span>\n                          ${metaChevronRight}\n                        </mwc-list-item>\n                      `\n                    )}\n                  `}\n              <mwc-button\n                no-attention\n                slot=\"primaryAction\"\n                label=\"Back\"\n                @click=${() => {\n                  this._state = \"pick_option\";\n                }}\n              ></mwc-button>\n            `;\n    } else if (this._state === \"pick_download_type\") {\n      heading = \"What version do you want to download?\";\n      content = html`\n        <mwc-list-item\n          twoline\n          hasMeta\n          dialogAction=\"close\"\n          @click=${this._handleWebDownload}\n        >\n          <span>Modern format</span>\n          <span slot=\"secondary\">\n            For use with ESPHome Web and other tools.\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          dialogAction=\"close\"\n          @click=${this._handleManualDownload}\n        >\n          <span>Legacy format</span>\n          <span slot=\"secondary\">For use with ESPHome Flasher.</span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        ${this._platformSupportsWebSerial\n          ? html`\n              <a\n                href=\"https://web.esphome.io\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                class=\"bottom-left\"\n                >Open ESPHome Web</a\n              >\n            `\n          : \"\"}\n        <mwc-button\n          no-attention\n          slot=\"primaryAction\"\n          label=\"Back\"\n          @click=${() => {\n            this._state = \"pick_option\";\n          }}\n        ></mwc-button>\n      `;\n    } else if (this._state === \"download_instructions\") {\n      let instructions: TemplateResult;\n      const downloadButton = until(\n        this._compileConfiguration,\n        html`<a download disabled href=\"#\">Download project</a>\n          preparing&nbsp;downloadâ€¦\n          <mwc-circular-progress\n            density=\"-8\"\n            indeterminate\n          ></mwc-circular-progress>`\n      );\n\n      if (this._isPico) {\n        heading = \"Install ESPHome via the USB drive\";\n        instructions = html`\n          <div>\n            You can install your ESPHome project ${this.configuration} on your\n            device via your file explorer by following these steps:\n          </div>\n          <ol>\n            <li>Disconnect your Raspberry Pi Pico from your computer</li>\n            <li>\n              Hold the BOOTSEL button and connect the Pico to your computer. The\n              Pico will show up as a USB drive named RPI-RP2\n            </li>\n            <li>${downloadButton}</li>\n            <li>\n              Drag the downloaded file to the USB drive. The installation is\n              complete when the drive disappears\n            </li>\n            <li>Your Pico now runs your ESPHome project ðŸŽ‰</li>\n          </ol>\n        `;\n      } else {\n        heading = \"Install ESPHome via the browser\";\n        instructions = html`\n          <div>\n            ESPHome can install ${this.configuration} on your device via the\n            browser if certain requirements are met:\n          </div>\n          <ul>\n            <li>ESPHome is visited over HTTPS</li>\n            <li>Your browser supports WebSerial</li>\n          </ul>\n          <div>\n            Not all requirements are currently met. The easiest solution is to\n            download your project and do the installation with ESPHome Web.\n            ESPHome Web works 100% in your browser and no data will be shared\n            with the ESPHome project.\n          </div>\n          <ol>\n            <li>${downloadButton}</li>\n            <li>\n              <a href=${ESPHOME_WEB_URL} target=\"_blank\" rel=\"noopener\"\n                >Open ESPHome Web</a\n              >\n            </li>\n          </ol>\n        `;\n      }\n      content = html`\n        ${instructions}\n\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          label=\"Back\"\n          @click=${() => {\n            this._state = \"pick_option\";\n          }}\n        ></mwc-button>\n        <mwc-button\n          no-attention\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n      `;\n    }\n\n    return html`\n      <mwc-dialog\n        open\n        heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n        .hideActions=${hideActions}\n      >\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  _renderProgress(label: string | TemplateResult, progress?: number) {\n    return html`\n      <div class=\"center\">\n        <div>\n          <mwc-circular-progress\n            active\n            ?indeterminate=${progress === undefined}\n            .progress=${progress !== undefined ? progress / 100 : undefined}\n            density=\"8\"\n          ></mwc-circular-progress>\n          ${progress !== undefined\n            ? html`<div class=\"progress-pct\">${progress}%</div>`\n            : \"\"}\n        </div>\n        ${label}\n      </div>\n    `;\n  }\n\n  _renderMessage(\n    icon: string,\n    label: string | TemplateResult,\n    showClose: boolean\n  ) {\n    return html`\n      <div class=\"center\">\n        <div class=\"icon\">${icon}</div>\n        ${label}\n      </div>\n      ${showClose\n        ? html`\n            <mwc-button\n              slot=\"primaryAction\"\n              dialogAction=\"ok\"\n              label=\"Close\"\n            ></mwc-button>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._updateSerialPorts();\n    getConfiguration(this.configuration).then((config) => {\n      this._ethernet = (config.loaded_integrations || []).includes(\"ethernet\");\n      this._isPico = config.esp_platform === \"RP2040\";\n    });\n  }\n\n  private async _updateSerialPorts() {\n    this._ports = await getSerialPorts();\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (\n      changedProps.has(\"_state\") &&\n      this._state === \"download_instructions\" &&\n      !this._compileConfiguration\n    ) {\n      this._abortCompilation = new AbortController();\n      this._compileConfiguration = compileConfiguration(this.configuration)\n        .then(\n          () => html`\n            <a\n              download\n              href=\"${getDownloadUrl(this.configuration, !this._isPico)}\"\n              rel=\"external\"\n              >Download project</a\n            >\n          `,\n          () => html`\n            <a download disabled href=\"#\">Download project</a>\n            <span class=\"prepare-error\">preparation failed:</span>\n            <button\n              class=\"link\"\n              dialogAction=\"close\"\n              @click=${() => {\n                openCompileDialog(this.configuration, !this._isPico);\n              }}\n            >\n              see what went wrong\n            </button>\n          `\n        )\n        .finally(() => {\n          this._abortCompilation = undefined;\n        });\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"_state\")) {\n      return;\n    }\n    if (this._state === \"pick_server_port\") {\n      const updateAndSchedule = async () => {\n        await this._updateSerialPorts();\n        this._updateSerialInterval = window.setTimeout(async () => {\n          await updateAndSchedule();\n        }, 5000);\n      };\n      updateAndSchedule();\n    } else if (changedProps.get(\"_state\") === \"pick_server_port\") {\n      clearTimeout(this._updateSerialInterval);\n      this._updateSerialInterval = undefined;\n    }\n  }\n\n  private _storeDialogWidth() {\n    // Set the min width to avoid the dialog shrinking\n    this.style.setProperty(\n      \"--mdc-dialog-min-width\",\n      `${this.shadowRoot!.querySelector(\"mwc-list-item\")!.clientWidth + 4}px`\n    );\n  }\n\n  private _handleServerInstall() {\n    this._storeDialogWidth();\n    this._state = \"pick_server_port\";\n  }\n\n  private _handleManualDownload() {\n    openCompileDialog(this.configuration, false);\n  }\n\n  private _handleWebDownload() {\n    openCompileDialog(this.configuration, true);\n  }\n\n  private _handleLegacyOption(ev: Event) {\n    openInstallServerDialog(this.configuration, (ev.currentTarget as any).port);\n    this._close();\n  }\n\n  private _handleBrowserInstall() {\n    if (!supportsWebSerial || !allowsWebSerial) {\n      this._storeDialogWidth();\n      this._state = \"download_instructions\";\n      return;\n    }\n\n    openInstallWebDialog({ configuration: this.configuration }, () =>\n      this._close()\n    );\n  }\n\n  private _close() {\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private async _handleClose() {\n    this._abortCompilation?.abort();\n\n    if (this._updateSerialInterval) {\n      clearTimeout(this._updateSerialInterval);\n      this._updateSerialInterval = undefined;\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    esphomeSvgStyles,\n    css`\n      mwc-list-item {\n        margin: 0 -20px;\n      }\n      .center {\n        text-align: center;\n      }\n      mwc-circular-progress {\n        margin-bottom: 16px;\n      }\n      li mwc-circular-progress {\n        margin: 0;\n      }\n      .progress-pct {\n        position: absolute;\n        top: 50px;\n        left: 0;\n        right: 0;\n      }\n      .icon {\n        font-size: 50px;\n        line-height: 80px;\n        color: black;\n      }\n      .show-ports {\n        margin-top: 16px;\n      }\n      .error {\n        padding: 8px 24px;\n        background-color: #fff59d;\n        margin: 0 -24px;\n      }\n      .prepare-error {\n        color: var(--alert-error-color);\n      }\n      ul,\n      ol {\n        padding-left: 24px;\n      }\n      li {\n        line-height: 2em;\n      }\n      li a {\n        display: inline-block;\n        margin-right: 8px;\n      }\n      a[disabled] {\n        pointer-events: none;\n        color: #999;\n      }\n      ol {\n        margin-bottom: 0;\n      }\n      a.bottom-left {\n        z-index: 1;\n        position: absolute;\n        line-height: 36px;\n        bottom: 9px;\n      }\n      esphome-alert {\n        color: black;\n        margin: 0 -24px;\n        display: block;\n        --esphome-alert-padding-left: 20px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-install-choose-dialog\": ESPHomeInstallChooseDialog;\n  }\n}\n"],"names":["s","constructor","t","this","G","disconnect","reconnect","deref","i","Y","Z","get","pause","Promise","resume","call","n","then","h","m","o","super","arguments","_$C_t","_$Cwt","_$Cq","r","_$CK","e","render","find","update","length","c","isConnected","disconnected","resolve","async","indexOf","setValue","reconnected","openInstallWebDialog","params","onDialogOpen","import","port","close","navigator","serial","requestPort","err","name","openNoPortPickedDialog","alert","message","esploader","createESPLoader","dialog","document","createElement","body","append","ALERT_ICONS","info","mdiInformationOutline","warning","mdiAlertOutline","error","mdiAlertCircleOutline","success","mdiCheckboxMarkedCircleOutline","ESPHomeAlert","LitElement","title","alertType","rtl","html","classMap","styles","css","__decorate","property","prototype","attribute","type","Boolean","customElement","ESPHomeInstallChooseDialog","_ethernet","_isPico","_state","_platformSupportsWebSerial","heading","content","configuration","_handleLegacyOption","metaChevronRight","_error","_handleBrowserInstall","_handleServerInstall","undefined","_ports","_renderProgress","_renderMessage","map","desc","_handleWebDownload","_handleManualDownload","instructions","downloadButton","until","_compileConfiguration","_handleClose","label","progress","icon","showClose","firstUpdated","changedProps","_updateSerialPorts","getConfiguration","config","loaded_integrations","includes","esp_platform","getSerialPorts","willUpdate","has","_abortCompilation","AbortController","compileConfiguration","getDownloadUrl","openCompileDialog","finally","updated","updateAndSchedule","_updateSerialInterval","window","setTimeout","clearTimeout","_storeDialogWidth","style","setProperty","shadowRoot","querySelector","clientWidth","ev","openInstallServerDialog","currentTarget","_close","supportsWebSerial","allowsWebSerial","_a","abort","parentNode","removeChild","esphomeDialogStyles","esphomeSvgStyles","state"],"mappings":"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","x_google_ignoreList":[0,1]}