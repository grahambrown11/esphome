{"version":3,"file":"c.b88ffda1.js","sources":["../../../../src/web-serial/flash.ts","../../../../src/web-serial/reset-serial-device.ts"],"sourcesContent":["import { ESPLoader } from \"esptool-js\";\nimport { getDownloadUrl } from \"../api/configuration\";\n\nexport interface FileToFlash {\n  data: string;\n  address: number;\n}\n\nexport const getConfigurationFiles = async (\n  filename: string\n): Promise<FileToFlash[]> => {\n  let resp: Response;\n  try {\n    resp = await fetch(getDownloadUrl(filename, true));\n  } catch (err) {\n    throw new Error(`Downloading firmware failed: ${err}`);\n  }\n\n  if (!resp.ok) {\n    throw new Error(`Downloading firmware failed: ${resp.status}`);\n  }\n\n  const reader = new FileReader();\n  const blob = await resp.blob();\n\n  const data = await new Promise<string>((resolve) => {\n    reader.addEventListener(\"load\", () => resolve(reader.result as string));\n    reader.readAsBinaryString(blob);\n  });\n\n  return [\n    {\n      data,\n      address: 0,\n    },\n  ];\n};\n\nexport const flashFiles = async (\n  esploader: ESPLoader,\n  fileArray: FileToFlash[],\n  erase: boolean,\n  writeProgress: (pct: number) => void\n) => {\n  if (erase) {\n    await esploader.erase_flash();\n  }\n\n  let totalSize = 0;\n  for (const file of fileArray) {\n    totalSize += file.data.length;\n  }\n  let totalWritten = 0;\n  writeProgress(0);\n\n  await esploader.write_flash(\n    fileArray,\n    \"keep\",\n    \"keep\",\n    \"keep\",\n    false,\n    true,\n    // report progress\n    (fileIndex: number, written: number, total: number) => {\n      const uncompressedWritten =\n        (written / total) * fileArray[fileIndex].data.length;\n\n      const newPct = Math.floor(\n        ((totalWritten + uncompressedWritten) / totalSize) * 100\n      );\n\n      // we're done with this file\n      if (written === total) {\n        totalWritten += uncompressedWritten;\n        return;\n      }\n\n      writeProgress(newPct);\n    }\n  );\n\n  writeProgress(100);\n};\n","import { Transport } from \"esptool-js\";\nimport { sleep } from \"../util/sleep\";\n\nexport const resetSerialDevice = async (transport: Transport) => {\n  await transport.setRTS(true); // EN->LOW\n  await sleep(100);\n  await transport.setRTS(false);\n};\n"],"names":["getConfigurationFiles","async","filename","resp","fetch","getDownloadUrl","err","Error","ok","status","reader","FileReader","blob","data","Promise","resolve","addEventListener","result","readAsBinaryString","address","flashFiles","esploader","fileArray","erase","writeProgress","erase_flash","totalSize","file","length","totalWritten","write_flash","fileIndex","written","total","uncompressedWritten","newPct","Math","floor","resetSerialDevice","transport","setRTS","sleep"],"mappings":"kFAQaA,EAAwBC,MACnCC,IAEA,IAAIC,EACJ,IACEA,QAAaC,MAAMC,EAAeH,GAAU,GAG7C,CAFC,MAAOI,GACP,MAAM,IAAIC,MAAM,gCAAgCD,IACjD,CAED,IAAKH,EAAKK,GACR,MAAM,IAAID,MAAM,gCAAgCJ,EAAKM,UAGvD,MAAMC,EAAS,IAAIC,WACbC,QAAaT,EAAKS,OAOxB,MAAO,CACL,CACEC,WAPe,IAAIC,SAAiBC,IACtCL,EAAOM,iBAAiB,QAAQ,IAAMD,EAAQL,EAAOO,UACrDP,EAAOQ,mBAAmBN,EAAK,IAM7BO,QAAS,GAEZ,EAGUC,EAAanB,MACxBoB,EACAC,EACAC,EACAC,KAEID,SACIF,EAAUI,cAGlB,IAAIC,EAAY,EAChB,IAAK,MAAMC,KAAQL,EACjBI,GAAaC,EAAKd,KAAKe,OAEzB,IAAIC,EAAe,EACnBL,EAAc,SAERH,EAAUS,YACdR,EACA,OACA,OACA,QACA,GACA,GAEA,CAACS,EAAmBC,EAAiBC,KACnC,MAAMC,EACHF,EAAUC,EAASX,EAAUS,GAAWlB,KAAKe,OAE1CO,EAASC,KAAKC,OAChBR,EAAeK,GAAuBR,EAAa,KAInDM,IAAYC,EAKhBT,EAAcW,GAJZN,GAAgBK,CAIG,IAIzBV,EAAc,IAAI,EC9EPc,EAAoBrC,MAAOsC,UAChCA,EAAUC,QAAO,SACjBC,EAAM,WACNF,EAAUC,QAAO,EAAM"}