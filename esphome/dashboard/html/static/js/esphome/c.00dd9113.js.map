{"version":3,"file":"c.00dd9113.js","sources":["../../../../src/install-web/install-web-dialog.ts"],"sourcesContent":["import { LitElement, html, PropertyValues, css, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-circular-progress\";\nimport \"@material/mwc-button\";\nimport type { ESPLoader } from \"esptool-js\";\nimport {\n  compileConfiguration,\n  Configuration,\n  getConfiguration,\n} from \"../api/configuration\";\nimport {\n  FileToFlash,\n  flashFiles,\n  getConfigurationFiles,\n} from \"../web-serial/flash\";\nimport { openCompileDialog } from \"../compile\";\nimport { openInstallWebDialog } from \".\";\nimport { chipFamilyToPlatform } from \"../const\";\nimport { esphomeDialogStyles } from \"../styles\";\nimport { resetSerialDevice } from \"../web-serial/reset-serial-device\";\nimport \"../components/esphome-svg-icon\";\nimport { mdiCloseCircleOutline, mdiRefresh } from \"@mdi/js\";\n\nconst OK_ICON = \"ðŸŽ‰\";\nconst WARNING_ICON = \"ðŸ‘€\";\n\ntype ValueOf<T> = T[keyof T];\n\n@customElement(\"esphome-install-web-dialog\")\nexport class ESPHomeInstallWebDialog extends LitElement {\n  @property() public params!: {\n    // If a port was passed in, the port will not be closed when dialog closes\n    port?: SerialPort;\n    // Pass either a configuration or a filesCallback. filesCallback receives platform of ESP device.\n    configuration?: string;\n    filesCallback?: (\n      platform: ValueOf<typeof chipFamilyToPlatform>\n    ) => Promise<FileToFlash[]>;\n    // Should the device be erased before installation\n    erase?: boolean;\n    // Callback when the dialog is closed. Note that if success is false,\n    // some other dialog might be opened when the dialog is closed.\n    onClose?: (success: boolean) => void;\n  };\n\n  @property() public esploader!: ESPLoader;\n\n  @state() private _writeProgress?: number;\n\n  @state() private _state:\n    | \"connecting_webserial\"\n    | \"prepare_installation\"\n    | \"installing\"\n    | \"done\" = \"connecting_webserial\";\n\n  @state() private _error?: string | TemplateResult;\n\n  private _platform?: ValueOf<typeof chipFamilyToPlatform>;\n\n  protected render() {\n    let heading;\n    let content;\n    let hideActions = false;\n\n    if (this._state === \"connecting_webserial\") {\n      content = this._renderProgress(\"Connecting\");\n      hideActions = true;\n    } else if (this._state === \"prepare_installation\") {\n      content = this._renderProgress(\"Preparing installation\");\n      hideActions = true;\n    } else if (this._state === \"installing\") {\n      content =\n        this._writeProgress === undefined\n          ? this._renderProgress(\"Erasing\")\n          : this._renderProgress(\n              html`\n                Installing<br /><br />\n                This will take\n                ${this._platform === \"ESP8266\" ? \"a minute\" : \"2 minutes\"}.<br />\n                Keep this page visible to prevent slow down\n              `,\n              // Show as undeterminate under 3% or else we don't show any pixels\n              this._writeProgress > 3 ? this._writeProgress : undefined\n            );\n      hideActions = true;\n    } else if (this._state === \"done\") {\n      if (this._error) {\n        content = content = html`\n          ${this._renderMessage(WARNING_ICON, this._error, false)}\n          <mwc-button\n            slot=\"secondaryAction\"\n            dialogAction=\"ok\"\n            label=\"Close\"\n          >\n            <esphome-svg-icon\n              slot=\"icon\"\n              .path=${mdiCloseCircleOutline}\n            ></esphome-svg-icon>\n          </mwc-button>\n          <mwc-button\n            slot=\"primaryAction\"\n            label=\"Retry\"\n            @click=${this._handleRetry}\n          >\n            <esphome-svg-icon\n              slot=\"icon\"\n              .path=${mdiRefresh}\n            ></esphome-svg-icon>\n          </mwc-button>\n        `;\n      } else {\n        content = this._renderMessage(\n          OK_ICON,\n          `Configuration installed!`,\n          true\n        );\n      }\n    }\n\n    return html`\n      <mwc-dialog\n        open\n        heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n        .hideActions=${hideActions}\n      >\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  _renderProgress(label: string | TemplateResult, progress?: number) {\n    return html`\n      <div class=\"center\">\n        <div>\n          <mwc-circular-progress\n            active\n            ?indeterminate=${progress === undefined}\n            .progress=${progress !== undefined ? progress / 100 : undefined}\n            density=\"8\"\n          ></mwc-circular-progress>\n          ${progress !== undefined\n            ? html`<div class=\"progress-pct\">${progress}%</div>`\n            : \"\"}\n        </div>\n        ${label}\n      </div>\n    `;\n  }\n\n  _renderMessage(\n    icon: string,\n    label: string | TemplateResult,\n    showClose: boolean\n  ) {\n    return html`\n      <div class=\"center\">\n        <div class=\"icon\">${icon}</div>\n        ${label}\n      </div>\n      ${showClose\n        ? html`\n            <mwc-button\n              slot=\"primaryAction\"\n              dialogAction=\"ok\"\n              label=\"Close\"\n            >\n              <esphome-svg-icon\n                slot=\"icon\"\n                .path=${mdiCloseCircleOutline}\n              ></esphome-svg-icon>\n            </mwc-button>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._handleInstall();\n  }\n\n  private _openCompileDialog() {\n    openCompileDialog(this.params.configuration!, false);\n    this._close();\n  }\n\n  private _handleRetry() {\n    openInstallWebDialog(this.params, () => this._close());\n  }\n\n  private async _handleInstall() {\n    const esploader = this.esploader;\n    esploader.transport.device.addEventListener(\"disconnect\", async () => {\n      this._state = \"done\";\n      this._error = \"Device disconnected\";\n      if (!this.params.port) {\n        await esploader.transport.device.close();\n      }\n    });\n\n    try {\n      try {\n        await esploader.main_fn();\n        await esploader.flash_id();\n      } catch (err) {\n        console.error(err);\n        this._state = \"done\";\n        this._error =\n          \"Failed to initialize. Try resetting your device or holding the BOOT button while selecting your serial port until it starts preparing the installation.\";\n        return;\n      }\n\n      this._platform = chipFamilyToPlatform[esploader.chip.CHIP_NAME];\n\n      const filesCallback =\n        this.params.filesCallback ||\n        ((platform: ValueOf<typeof chipFamilyToPlatform>) =>\n          this._getFilesForConfiguration(this.params.configuration!, platform));\n\n      let files: FileToFlash[] | undefined = [];\n\n      try {\n        files = await filesCallback(this._platform!);\n      } catch (err) {\n        this._state = \"done\";\n        this._error = String(err);\n        return;\n      }\n\n      // If getFilesForConfiguration already did some error handling.\n      if (!files) {\n        return;\n      }\n\n      this._state = \"installing\";\n\n      try {\n        await flashFiles(\n          esploader,\n          files,\n          this.params.erase === true,\n          (pct) => {\n            this._writeProgress = pct;\n          }\n        );\n      } catch (err) {\n        // It is \"done\" if disconnected\n        // @ts-ignore\n        if (this._state !== \"done\") {\n          this._error = `Installation failed: ${err}`;\n          this._state = \"done\";\n        }\n        return;\n      }\n\n      await resetSerialDevice(esploader.transport);\n      this._state = \"done\";\n    } finally {\n      if (!this.params.port) {\n        console.log(\"Closing port\");\n        try {\n          await esploader.transport.disconnect();\n        } catch (err) {\n          // can happen if we already closed in disconnect\n        }\n      }\n    }\n  }\n\n  private async _getFilesForConfiguration(\n    configuration: string,\n    platform: ValueOf<typeof chipFamilyToPlatform>\n  ): Promise<FileToFlash[] | undefined> {\n    let info: Configuration;\n\n    try {\n      info = await getConfiguration(configuration);\n    } catch (err) {\n      this._state = \"done\";\n      this._error = \"Error fetching configuration information\";\n      return;\n    }\n\n    if (platform !== info.esp_platform.toUpperCase()) {\n      this._state = \"done\";\n      this._error = `Configuration does not match the platform of the connected device. Expected an ${info.esp_platform.toUpperCase()} device.`;\n      return;\n    }\n\n    this._state = \"prepare_installation\";\n\n    try {\n      await compileConfiguration(configuration);\n    } catch (err) {\n      this._error = html`\n        Failed to prepare configuration<br /><br />\n        <button class=\"link\" @click=${this._openCompileDialog}>\n          See what went wrong.\n        </button>\n      `;\n      this._state = \"done\";\n      return;\n    }\n\n    // It is \"done\" if disconnected while compiling\n    // @ts-ignore\n    if (this._state === \"done\") {\n      return;\n    }\n\n    return await getConfigurationFiles(configuration);\n  }\n\n  private _close() {\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private async _handleClose() {\n    if (this.params.onClose) {\n      this.params.onClose(this._state === \"done\" && this._error === undefined);\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      mwc-list-item {\n        margin: 0 -20px;\n      }\n      svg {\n        fill: currentColor;\n      }\n      .center {\n        text-align: center;\n      }\n      mwc-circular-progress {\n        margin-bottom: 16px;\n      }\n      .progress-pct {\n        position: absolute;\n        top: 50px;\n        left: 0;\n        right: 0;\n      }\n      .icon {\n        font-size: 50px;\n        line-height: 80px;\n        color: black;\n      }\n      .show-ports {\n        margin-top: 16px;\n      }\n      .error {\n        padding: 8px 24px;\n        background-color: #fff59d;\n        margin: 0 -24px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-install-web-dialog\": ESPHomeInstallWebDialog;\n  }\n}\n"],"names":["ESPHomeInstallWebDialog","LitElement","constructor","this","_state","render","content","hideActions","_renderProgress","undefined","_writeProgress","html","_platform","_error","_renderMessage","mdiCloseCircleOutline","_handleRetry","mdiRefresh","heading","_handleClose","label","progress","icon","showClose","firstUpdated","changedProps","super","_handleInstall","_openCompileDialog","openCompileDialog","params","configuration","_close","openInstallWebDialog","async","esploader","transport","device","addEventListener","port","close","main_fn","flash_id","err","console","error","chipFamilyToPlatform","chip","CHIP_NAME","filesCallback","platform","_getFilesForConfiguration","files","String","flashFiles","erase","pct","resetSerialDevice","log","disconnect","info","getConfiguration","esp_platform","toUpperCase","compileConfiguration","getConfigurationFiles","shadowRoot","querySelector","onClose","parentNode","removeChild","styles","esphomeDialogStyles","css","__decorate","property","prototype","state","customElement"],"mappings":"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"}